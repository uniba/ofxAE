ExportUtil = {

DRAWMODE_TABLE : {
	12: "none",
	13: "add",
	14: "subtract",

	20: "add",

	4820: "add",

	6012: "none",
	6013: "add",
	6014: "subtract",

	6212: "none",
	6213: "add",
	6214: "subtract",
//	6215: "cross",
},

getDrawMode : function(mode)
{
	var a = this.DRAWMODE_TABLE[mode];
	var b = this.DRAWMODE_TABLE[mode%100];
	return a?a:(b?b:mode);
},

LayerType : {
	UNKNOWN:"unknown",
	COMPOSITION:"composition",
	IMAGE:"image",
	SEQUENCE:"sequence",
	MOVIE:"movie",
	SOLID:"solid",
	PLACEHOLDER:"placeholder",
	TEXT:"text",
	SHAPE:"shape",
	CAMERA:"camera",
	LIGHT:"light",
},

getLayerType : function(layer)
{
	var _source = layer.source;
  if (_source) {
      if(!_source.useProxy && _source instanceof CompItem) {
          return this.LayerType.COMPOSITION;
      }
  }

	var s = undefined;
  if (_source) {
    s = _source.useProxy ? _source.proxySource : _source.mainSource;
  }
  
	if(s) {
		if(s instanceof FileSource) {
			if(s.isStill) {
				return this.LayerType.IMAGE;
			}
			else  {
				if(s.conformFrameRate === s.nativeFrameRate) {
					return this.LayerType.SEQUENCE;
				}
				else {
					return this.LayerType.MOVIE;
				}
			}
		}
		else if(s instanceof SolidSource) {
			return this.LayerType.SOLID;
		}
		else if(s instanceof PlaceHolderSource) {
			return this.LayerType.PLACEHOLDER;
		}
	}
	else {
		var l = layer;
		if(l instanceof TextLayer) {
			return this.LayerType.TEXT;
		}
		else if(l instanceof ShapeLayer) {
			return this.LayerType.SHAPE;
		}
		else if(l instanceof CameraLayer) {
			return this.LayerType.CAMERA;
		}
		else if(l instanceof LightLayer) {
			return this.LayerType.LIGHT;
		}
	}
	return this.LayerType.UNKNOWN;
},

isAVLayer : function(layer)
{
	switch(this.getLayerType(layer)) {
		case "composition":
		case "image":
		case "sequence":
		case "movie":
		case "solid":
		case "text":
		case "shape":
			return true;
	}
	return false;
},

compare : function(a0, a1)
{
	if(typeof(a0) !== typeof(a1)) {
		return false;
	}
	if(a0 instanceof Array) {
		if(a0.length !== a1.length) {
			return false;
		}
		for(var i = 0; i < a0.length; ++i) {
			if(a0[i] !== a1[i]) {
				return false;
			}
		}
	}
	else if(a0 !== a1) {
		return false;
	}
	return true;
},

toSource : function(obj)
{
	var str = obj.toSource();
	str = str.replace(/\(\{/g,"{").replace(/\}\)/g,"}");
	str = str.replace(/([^[{(,\s:]+):/g, "\"$1\":");
	return str;
},

hasKey : function(layer, prop_name)
{
	if(!layer || !prop_name) {
		return false;
	}
	var prop = layer.property(prop_name);
	if(!prop) {
		return false;
	}
	return prop.numKeys > 0;
},

};

